#Область ПрограммныйИнтерфейс

Процедура ОтправитьСообщения() Экспорт
	
	Сообщения = РегистрыСведений.УС_ИсходящиеСообщения.ПолучитьСообщенияКОтправке();
	
	Для каждого Сообщение из Сообщения Цикл
		
		Если ОтправитьСообщение(Сообщение) Тогда
			
			РегистрыСведений.УС_ИсходящиеСообщения.УстановитьСтатусСообщения(Сообщение.ИдентификаторСообщения,
			                                                               Перечисления.УС_СтатусыСообщений.Обработано);
			
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПолучитьСообщения() Экспорт
	
	Обработка = Обработки.УС_РаботаСKafkaЧерезВК.Создать();
		
	Настройки = УС_ОтправкаПолучениеСообщенийПовтИсп.ПолучитьНастройки();
	
	Для каждого Настройка из Настройки Цикл
		
		Обработка.ЗаполнитьНастройки(Настройка);
		
		Обработка.Инициализация_Чтение(); 
		
		ТаблицаСообщений = Обработка.ПрочитатьJSON_Чтение();
		
		СоздатьВходящиеСообщения(ТаблицаСообщений);
		
	КонецЦикла;		
	
КонецПроцедуры

Процедура ОбработатьВходящиеСообщения() Экспорт
	
	СообщенияКОбработке = РегистрыСведений.УС_ВходящиеСообщения.ПолучитьСообщенияКОбработке();
	
	Для каждого Сообщение из СообщенияКОбработке Цикл
		
		ОбработатьВходящееСообщение(Сообщение);
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура СформироватьИсходящееСообщения() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СертификатыИзменения.Узел КАК Узел,
	               |	СертификатыИзменения.Ссылка КАК Сертификат
	               |ПОМЕСТИТЬ ВТ_Сертификаты
	               |ИЗ
	               |	Справочник.УС_Сертификаты.Изменения КАК СертификатыИзменения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОстаткиПоСертификатамОстатки.Сертификат КАК Сертификат,
	               |	ОстаткиПоСертификатамОстатки.СуммаОстаток КАК Остаток,
	               |	ОстаткиПоСертификатамОстатки.Сертификат.Номер КАК Номер,
	               |	ОстаткиПоСертификатамОстатки.Сертификат.ВладелецСертификата КАК Владелец
	               |ПОМЕСТИТЬ Остатки
	               |ИЗ
	               |	РегистрНакопления.УС_ОстаткиПоСертификатам.Остатки(
	               |			,
	               |			Сертификат В
	               |				(ВЫБРАТЬ
	               |					т.Сертификат
	               |				ИЗ
	               |					ВТ_Сертификаты КАК т)) КАК ОстаткиПоСертификатамОстатки
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Остатки.Сертификат КАК Сертификат,
	               |	Остатки.Остаток КАК Остаток,
	               |	Остатки.Номер КАК Номер,
	               |	Остатки.Владелец КАК Владелец,
	               |	ВТ_Сертификаты.Узел КАК Узел
	               |ИЗ
	               |	ВТ_Сертификаты КАК ВТ_Сертификаты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	               |		ПО ВТ_Сертификаты.Сертификат = Остатки.Сертификат";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			СформироватьИсходящееСообщениеИзменениеБаланса(Выборка);
			ПланыОбмена.УдалитьРегистрациюИзменений(Выборка.Узел, Выборка.Сертификат);
			ЗафиксироватьТранзакцию();
		Исключение	                  
			
			ОтменитьТранзакцию();
			
			ЗаписьЖурналаРегистрации("УС.Ошибка",УровеньЖурналаРегистрации.Ошибка,, ОписаниеОшибки()); 
			
		КонецПопытки;	
		
	КонецЦикла;	
	
КонецПроцедуры	
	
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ОтправитьСообщение(Сообщение) Экспорт
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Результат = Ложь;
	
	Обработка = Обработки.УС_РаботаСKafkaЧерезВК.Создать();
		
	Настройки = УС_ОтправкаПолучениеСообщенийПовтИсп.ПолучитьНастройки();
	
	Для каждого Настройка из Настройки Цикл
		
		Обработка.ЗаполнитьНастройки(Настройка);
		
		Обработка.Инициализация_Запись(); 
		
		СтруктураСообщения = ПодготовитьСтруктуруДляОтправки(Сообщение);
		
		Обработка.ЗагрузитьДляОтправки(СтруктураСообщения); 
		
		Результат = Обработка.Отправить_Запись();
		
	КонецЦикла;	 
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ОтправкаСообщения",ВремяНачалаЗамера);
	
	Возврат Результат;
	
КонецФункции	

Процедура ОбработатьВходящееСообщение(Сообщение)
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	СтруктураСообщения = УС_ОтправкаПолучениеСообщенийСервер.JSONВСтруктуру(Сообщение.ТелоСообщения);
	
	Ошибка = "";
	
	Если Сообщение.ТипСообщения = Перечисления.УС_ТипыСообщений.АктивацияКарты Тогда
		
		НомерСертификата = СтруктураСообщения.НомерСертификата;
		
		Сертификат = Справочники.УС_Сертификаты.НайтиПоРеквизиту("Номер", НомерСертификата);
		
		СертификатОбъект = Неопределено;
		
		Если ЗначениеЗаполнено(Сертификат) Тогда
			
			СертификатОбъект = Сертификат.ПолучитьОбъект();
		Иначе
			СертификатОбъект = Справочники.УС_Сертификаты.СоздатьЭлемент();
			
		КонецЕсли;	
			
		Если СертификатОбъект.Активирован Тогда
			
			Ошибка = НСтр("ru = 'Сертификат уже активирован'");
			
			РегистрыСведений.УС_ВходящиеСообщения.УстановитьСтатусСообщения(Сообщение.ИдентификаторСообщения, Перечисления.УС_СтатусыСообщений.Ошибка, Ошибка);

		Иначе
			
			СертификатОбъект.Номер = НомерСертификата;
			
			СертификатОбъект.ВладелецСертификата = СтруктураСообщения.Владелец;  
			
			СертификатОбъект.Номинал  = СтруктураСообщения.Номинал;
			
			Если СертификатОбъект.Номинал Тогда
			
				СертификатОбъект.Активирован = Истина;
				
			КонецЕсли;
			
			
			НачатьТранзакцию();
			
			Попытка 
				
				//Записывем сертификат
				СертификатОбъект.Записать();
				
				Если СертификатОбъект.Номинал Тогда
					
					//формируем документ
					
					НовДокумент = Документы.УС_НачисленияСписанияПоСертификатам.СоздатьДокумент();
					НовДокумент.Дата = ТекущаяДатаСеанса();
					НовДокумент.ВидОперации = Перечисления.УС_ВидыОперацииСертификатов.Начисление;
					НовДокумент.Сертификат = СертификатОбъект.Ссылка;
					НовДокумент.Сумма      = СертификатОбъект.Номинал;
					НовДокумент.Записать(РежимЗаписиДокумента.Проведение);
					
				КонецЕсли;	
				
				РегистрыСведений.УС_ВходящиеСообщения.УстановитьСтатусСообщения(Сообщение.ИдентификаторСообщения, Перечисления.УС_СтатусыСообщений.Обработано);
				
				ЗафиксироватьТранзакцию();
				
			Исключение 
				
				Ошибка = ОписаниеОшибки();
				
				ОтменитьТранзакцию();
				
				РегистрыСведений.УС_ВходящиеСообщения.УстановитьСтатусСообщения(Сообщение.ИдентификаторСообщения, Перечисления.УС_СтатусыСообщений.Ошибка, Ошибка);
				
			КонецПопытки;	
				
		КонецЕсли;	
		
	ИначеЕсли Сообщение.ТипСообщения = Перечисления.УС_ТипыСообщений.Списание Тогда
		
		НомерСертификата = СтруктураСообщения.НомерСертификата;
		
		Сертификат = Справочники.УС_Сертификаты.НайтиПоРеквизиту("Номер", СокрЛП(НомерСертификата));
		
		Списать = СтруктураСообщения.Списать;
		
		Если не ЗначениеЗаполнено(Сертификат) Тогда
						
			Ошибка = НСтр("ru = 'Не найден сертификат'");
			
			РегистрыСведений.УС_ВходящиеСообщения.УстановитьСтатусСообщения(Сообщение.ИдентификаторСообщения, Перечисления.УС_СтатусыСообщений.Ошибка, Ошибка);
			
		ИначеЕсли не ЗначениеЗаполнено(Списать) Тогда
						
			Ошибка = НСтр("ru = 'Не найден опеределена сумма списания'");
			
			РегистрыСведений.УС_ВходящиеСообщения.УстановитьСтатусСообщения(Сообщение.ИдентификаторСообщения, Перечисления.УС_СтатусыСообщений.Ошибка, Ошибка);	

		Иначе
			
						
			НачатьТранзакцию();
			
			Попытка 
											
				//формируем документ
				
				НовДокумент = Документы.УС_НачисленияСписанияПоСертификатам.СоздатьДокумент();
				НовДокумент.Дата = ТекущаяДатаСеанса();
				НовДокумент.ВидОперации = Перечисления.УС_ВидыОперацииСертификатов.Списание;
				НовДокумент.Сертификат = Сертификат;
				НовДокумент.Сумма      = СтруктураСообщения.Списать;
				НовДокумент.Записать(РежимЗаписиДокумента.Проведение);
					
				РегистрыСведений.УС_ВходящиеСообщения.УстановитьСтатусСообщения(Сообщение.ИдентификаторСообщения, Перечисления.УС_СтатусыСообщений.Обработано);
				
				ЗафиксироватьТранзакцию();
								
			Исключение 
				
				Ошибка = ОписаниеОшибки();
				
				ОтменитьТранзакцию();
				
				РегистрыСведений.УС_ВходящиеСообщения.УстановитьСтатусСообщения(Сообщение.ИдентификаторСообщения, Перечисления.УС_СтатусыСообщений.Ошибка, Ошибка);
				
			КонецПопытки;	
				
		КонецЕсли;	   
		
	ИначеЕсли Сообщение.ТипСообщения = Перечисления.УС_ТипыСообщений.Баланс Тогда
		
		ИнформацияПоБалансу = Новый Структура();
		
		ИнформацияПоБалансу.Вставить("НомерСертификата", СтруктураСообщения.НомерСертификата);
		
		ИнформацияПоБалансу.Вставить("Остаток ", СтруктураСообщения.Остаток);
		
		ИнформацияПоБалансу.Вставить("Владелец", СтруктураСообщения.Владелец);     
		
		ИнформацияПоБалансу.Вставить("Период", ТекущаяДатаСеанса()); 
								
		НачатьТранзакцию();
			
		Попытка 
												
			ЗаписьБаланса = РегистрыСведений.УС_ИнформацияПоСертификатам.СоздатьМенеджерЗаписи();
			
			ЗаполнитьЗначенияСвойств(ЗаписьБаланса, ИнформацияПоБалансу);
			
			ЗаписьБаланса.Записать();  
			
			РегистрыСведений.УС_ВходящиеСообщения.УстановитьСтатусСообщения(Сообщение.ИдентификаторСообщения, Перечисления.УС_СтатусыСообщений.Обработано);
			
			ЗафиксироватьТранзакцию();
						
		Исключение 
			
			Ошибка = ОписаниеОшибки();
			
			ОтменитьТранзакцию();
			
			РегистрыСведений.УС_ВходящиеСообщения.УстановитьСтатусСообщения(Сообщение.ИдентификаторСообщения, Перечисления.УС_СтатусыСообщений.Ошибка, Ошибка);
			
		КонецПопытки;		
						
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ОбработкаСообщения",ВремяНачалаЗамера);
	
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПодготовитьСтруктуруДляОтправки(Сообщение)
	
	
	УИН = СокрЛП(Новый УникальныйИдентификатор());
	
	мЗаголовки = Новый Массив(); 
	
	мЗаголовки.Добавить(Новый Структура("Заголовок", Сообщение.ИдентификаторСообщения)); 
	мЗаголовки.Добавить(Новый Структура("ТипСообщения", XMLСтрока(Сообщение.ТипСообщения)));
	мЗаголовки.Добавить(Новый Структура("ИдентификаторЗапроса", Сообщение.ИдентификаторЗапроса)); 
	
			
	СтруктураСообщения = Новый Структура("Key, Value, Headers", 
												       Сообщение.ИдентификаторСообщения, 
												       Сообщение.ТелоСообщения, 
												       мЗаголовки); 
		
	Возврат  СтруктураСообщения;  

	
	
КонецФункции	

Процедура СоздатьВходящиеСообщения(ТаблицаСообщений) 
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	//тзРезультат.Колонки.Добавить("key", 		);
	//тзРезультат.Колонки.Добавить("value", 		);
	//тзРезультат.Колонки.Добавить("topic", 		Новый ОписаниеТипов("Строка"));
	//тзРезультат.Колонки.Добавить("partition", 	Новый ОписаниеТипов("Число"));
	//тзРезультат.Колонки.Добавить("offset", 		Новый ОписаниеТипов("Число"));
	//тзРезультат.Колонки.Добавить("timestamp", 	Новый ОписаниеТипов("Число"));
	//тзРезультат.Колонки.Добавить("headers", 	Новый ОписаниеТипов("ТаблицаЗначений"));

	
	Для каждого Сообщение из ТаблицаСообщений Цикл 
		
		ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();

		
		СтруктураСообщения = новый Структура;
		
		СтруктураСообщения.Вставить("ИдентификаторСообщения", Сообщение.Key);
		
		СтруктураСообщения.Вставить("ТелоСообщения",          Сообщение.value);
		
		Заголовки = Сообщение.headers;
		
		НайденнаяСтрокаЗаголовка = Заголовки.Найти("ТипСообщения","Key");
		
		Если НайденнаяСтрокаЗаголовка <> Неопределено Тогда
			
			СтруктураСообщения.Вставить("ТипСообщения",  XMLЗначение(Тип("ПеречислениеСсылка.УС_ТипыСообщений"), НайденнаяСтрокаЗаголовка.Value));
			
		КонецЕсли;
		
		НайденнаяСтрокаЗаголовка = Заголовки.Найти("ИдентификаторЗапроса","Key");
		
		Если НайденнаяСтрокаЗаголовка <> Неопределено Тогда
			
			СтруктураСообщения.Вставить("ИдентификаторЗапроса",  НайденнаяСтрокаЗаголовка.Value);
			
		КонецЕсли; 
		
		РегистрыСведений.УС_ВходящиеСообщения.ЗаписатьСообщение(СтруктураСообщения);
		
	КонецЦикла;	
	
	Сообщить("Получил:"+ТаблицаСообщений.Количество()); 
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("СозданиеВходящегоСообщения",ВремяНачалаЗамера);
	
КонецПроцедуры

Процедура СформироватьИсходящееСообщениеИзменениеБаланса(Выборка) 
	
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	ТипСообщенияСтрокой = XMLСтрока(Перечисления.УС_ТипыСообщений.Баланс);
	
	
	//Формируем тело сообщения
	СтруктураСообщения = Новый Структура;
	СтруктураСообщения.Вставить("ТипСообщения", ТипСообщенияСтрокой); 
	СтруктураСообщения.Вставить("НомерСертификата", Выборка.Номер); 
	СтруктураСообщения.Вставить("Остаток",  Выборка.Остаток);
	СтруктураСообщения.Вставить("Владелец", Выборка.Владелец);
	
	ТелоСообщения = УС_ОтправкаПолучениеСообщенийСервер.СтруктуруВJSON(СтруктураСообщения);
	
	ИдентификаторСообщения = СокрЛП(Новый УникальныйИдентификатор);
	
	СтруктураСообщения = Новый Структура;
	СтруктураСообщения.Вставить("ИдентификаторСообщения", ИдентификаторСообщения);
	СтруктураСообщения.Вставить("ТелоСообщения", ТелоСообщения); 
	СтруктураСообщения.Вставить("ТипСообщения", Перечисления.УС_ТипыСообщений.Баланс);

	РегистрыСведений.УС_ИсходящиеСообщения.ЗаписатьСообщение(СтруктураСообщения); 
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ФормированиеИсходящегоСообщения",ВремяНачалаЗамера);	
	
КонецПроцедуры	

Процедура РегистрацияИзменениеОстаткаПриЗаписи(Источник, Отказ) Экспорт  
	
	Узлы = УС_ОтправкаПолучениеСообщенийПовтИсп.ПолучитьУзлыОбмена();
	
	ПланыОбмена.ЗарегистрироватьИзменения( Узлы, Источник.Сертификат);
	
КонецПроцедуры

Функция СтруктуруВJSON(Данные) Экспорт
		
	ЗаписьJSON   = Новый ЗаписьJSON(); 
	
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, Данные);
		
	Возврат  ЗаписьJSON.Закрыть();
	  	
КонецФункции  

Функция JSONВСтруктуру(JsonСтрока) Экспорт
		
	Чтение = Новый ЧтениеJSON;
	
	Чтение.УстановитьСтроку(JsonСтрока);
	
	Данные = ПрочитатьJSON(Чтение, Ложь);	
	
	Чтение.Закрыть();
	
	Возврат Данные;	
	
КонецФункции

#КонецОбласти